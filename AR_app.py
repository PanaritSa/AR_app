# AR_app.py
import streamlit as st

from AR_constants import HERO_IMAGE, IMAGE_SIZE
from AR_resources import get_resources
from AR_lifestyle import extract_lifestyle_tags, match_score
from AR_ui import menu_bar, home_button, show_house_details
from AR_features import get_recommendations
from AR_pages_home import render_home
from AR_pages_classify import render_classify
from AR_pages_filter import render_filter
from AR_pages_style import render_style
from AR_pages_favorites import render_favorites

st.set_page_config(page_title="House Finder", layout="wide")

R = get_resources()
df = R["df"]
model_classification = R["model_classification"]
base_model = R["base_model"]
pooling_layer = R["pooling_layer"]
feature_list = R["feature_list"]
filenames = R["filenames"]

if "lifestyle_tags" not in df.columns:
    df["lifestyle_tags"] = df.apply(lambda row: extract_lifestyle_tags(row.get("magnet"), row.get("facilities")), axis=1)

st.image(HERO_IMAGE, width=600)

for key, default in {
    "page": "Home",
    "selected_house": None,
    "search_results": None,
    "previous_page": "Home",
    "return_page": "Home",
    "classify_results": {},
    "style_results": None,
    "favorites": [],
    "swipe_index": 0,
}.items():
    if key not in st.session_state:
        st.session_state[key] = default

menu_bar()

if st.session_state.page != st.session_state.previous_page:
    st.session_state.previous_page = st.session_state.page
    st.session_state.search_results = None
    st.session_state.style_results = None
    st.session_state.classify_results = {}
    st.session_state.selected_house = None
    st.rerun()

if st.session_state.selected_house:
    home_button()
    show_house_details(
        st.session_state.selected_house,
        df=df,
        feature_list=feature_list,
        filenames=filenames,
        get_recommendations_fn=lambda p: get_recommendations(p, filenames, feature_list, topk=5)
    )

elif st.session_state.page == "Home":
    render_home(df)

elif st.session_state.page == "Classify":
    home_button()
    render_classify(df, model_classification, base_model, pooling_layer, feature_list, filenames)

elif st.session_state.page == "Filter":
    home_button()
    render_filter(df)

elif st.session_state.page == "Style":
    home_button()
    render_style(df)

elif st.session_state.page == "Favorites":
    home_button()
    render_favorites(df, feature_list, filenames)

elif st.session_state.page == "My Lifestyle":
    home_button()
    st.subheader("üíñ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

    st.markdown("#### üß† ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?")
    personality = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏Ç‡πâ‡∏≠", ["#Peaceful", "#Socializer", "#ActiveLifestyle", "#RelaxingVibes", "#FamilyFriendly"])

    st.markdown("#### üçΩÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?")
    food_pref = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö", ["#Foodie", "#BudgetFriendly", "#NightOwl", "#LocalLiving"])

    st.markdown("#### üö∂‚Äç‚ôÄÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á?")
    transport = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", ["#CarFree", "#UrbanLife", "#Traveler", "#TimeSaver"])

    st.markdown("#### üèÉ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô?")
    activities = st.multiselect("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö", ["#FitnessLover", "#NatureLover", "#PetFriendly", "#WFH", "#PhotographyLover"])

    st.markdown("#### üõçÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô?")
    shopping = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á", ["#Shopaholic", "#ConvenienceSeeker", "#LocalLiving"])

    selected_tags = list(set(personality + food_pref + transport + activities + shopping))

    if selected_tags:
        df["match_score"] = df["lifestyle_tags"].apply(lambda tags: match_score(selected_tags, tags))
        matched_df = df[df["match_score"] > 0].sort_values(by="match_score", ascending=False)
        st.markdown(f"### üîç ‡∏û‡∏ö {len(matched_df)} ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

        if "swipe_index" not in st.session_state:
            st.session_state.swipe_index = 0

        matched_df = matched_df.reset_index(drop=True)
        if st.session_state.swipe_index < len(matched_df):
            house = matched_df.iloc[st.session_state.swipe_index]
            st.image(house["image_path"], width=500)
            st.write(f"**Address:** {house['address']}")
            st.write(f"**Price:** {house['price']} THB")
            st.write(f"**Style:** {house['style']}, Area: {house['area_size']} sqm")
            st.write(f"**Facilities:** {house['facilities']}")
            st.write(f"**Nearby:** {house['magnet']}")
            st.write(f"**Lifestyle Tags:** {' '.join(house['lifestyle_tags'])}")
            st.write(f"**Match Score:** {house['match_score']:.2f}")

            col1, col2 = st.columns([1, 1])
            with col1:
                if st.button("‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ"):
                    st.session_state.swipe_index += 1
                    st.rerun()
            with col2:
                if st.button("‚ù§Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö"):
                    already = any(fav["image_path"] == house["image_path"] for fav in st.session_state.favorites)
                    if not already:
                        st.session_state.favorites.append(house.to_dict())
                        st.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ Favorites ‡πÅ‡∏•‡πâ‡∏ß!")
                    else:
                        st.info("üè∑Ô∏è ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Favorites ‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state.swipe_index += 1
                    st.rerun()
        else:
            st.info("üèÅ You've swiped through all matched houses!")
    else:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å tag ‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏π‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ ‚ú®")

if st.session_state.page != "Home" and not st.session_state.selected_house:
    st.markdown("---")
    if st.button("üè† Return to Home", key="global_home"):
        st.session_state.page = "Home"
        st.rerun()
